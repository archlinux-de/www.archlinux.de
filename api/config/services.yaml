# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    geoip.database: '/usr/share/GeoIP/GeoLite2-Country.mmdb'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Request/'
            - '../src/Exception/'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    MaxMind\Db\Reader:
        arguments:
            - '%geoip.database%'

    League\ISO3166\ISO3166:

    OpenSearch\ClientBuilder:
        calls:
            - [ setHosts, [ [ '%env(resolve:OPENSEARCH_URL)%' ] ] ]

    OpenSearch\Client:
        factory: [ '@OpenSearch\ClientBuilder', build ]

    HTMLPurifier:
        class: HTMLPurifier
        bind:
            $config:
                HTML.Allowed: 'a[href],p,code,pre,ul,ol,li,br,strong,em,del,ins,blockquote,h3,h4,h5,h6'
                HTML.Nofollow: true
                HTML.TargetNoopener: true

    App\Service\PackageDatabaseMirror:
        $mirrorUrl: '%app.packages.mirror%'

    App\Service\RepositoryManager:
        $repositoryConfiguration: '%app.packages.repositories%'

    App\Service\MirrorFetcher:
        $mirrorStatusUrl: '%app.mirrors.status%'

    App\Service\ReleaseFetcher:
        $releaseUrl: '%app.releng.releases%'

    App\Service\NewsItemFetcher:
        $flarumUrl: '%app.news.flarum_url%'
        $flarumTag: '%app.news.flarum_tag%'

    App\Serializer\NewsItemDenormalizer:
        $flarumUrl: '%app.news.flarum_url%'

    App\Service\PackagePopularityFetcher:
        $packageStatisticsApiUrl: '%app.packages.packageStatisticsApiUrl%'

    App\Serializer\PackageNormalizer:
        $cgitUrl: '%app.packages.cgit%'

    App\Controller\MirrorController:
        $mirrorCountry: '%app.mirrors.country%'
        $mirrorArchive: '%app.mirrors.archive%'

    App\Controller\PackagesController:
        $defaultArchitecture: '%app.packages.default_architecture%'

    App\Controller\SitemapController:
        $defaultArchitecture: '%app.packages.default_architecture%'

    App\SearchRepository\MirrorSearchRepository:
        $mirrorCountry: '%app.mirrors.country%'

    App\EventListener\IndexUpdateEventListener:
        arguments:
            $environment: '%kernel.environment%'
        tags:
            - { name: 'doctrine.event_listener', event: 'postPersist', lazy: true }
            - { name: 'doctrine.event_listener', event: 'postUpdate', lazy: true }
            - { name: 'doctrine.event_listener', event: 'preRemove', lazy: true }
            - { name: 'doctrine.event_listener', event: 'postFlush', lazy: true }

    App\SearchIndex\SearchIndexer:
        arguments:
            -
                - '@App\SearchIndex\MirrorSearchIndexer'
                - '@App\SearchIndex\NewsSearchIndexer'
                - '@App\SearchIndex\PackageSearchIndexer'
                - '@App\SearchIndex\ReleaseSearchIndexer'

    App\SearchIndex\MirrorSearchIndexer:
        $environment: '%kernel.environment%'

    App\SearchIndex\NewsSearchIndexer:
        $environment: '%kernel.environment%'

    App\SearchIndex\PackageSearchIndexer:
        $environment: '%kernel.environment%'

    App\SearchIndex\ReleaseSearchIndexer:
        $environment: '%kernel.environment%'
