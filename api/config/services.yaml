# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    geoip.database: '/usr/share/GeoIP/GeoLite2-Country.mmdb'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php,Request,Exception}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: [ 'controller.service_arguments' ]

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    MaxMind\Db\Reader:
        arguments:
            - '%geoip.database%'

    League\ISO3166\ISO3166:

    Elasticsearch\ClientBuilder:
        calls:
            - [ setHosts, [ [ '%env(resolve:ELASTICSEARCH_URL)%' ] ] ]

    Elasticsearch\Client:
        factory: [ '@Elasticsearch\ClientBuilder', build ]

    App\Service\PackageDatabaseMirror:
        $mirrorUrl: '%app.packages.mirror%'

    App\Service\RepositoryManager:
        $repositoryConfiguration: '%app.packages.repositories%'

    App\Service\MirrorFetcher:
        $mirrorStatusUrl: '%app.mirrors.status%'

    App\Service\ReleaseFetcher:
        $releaseUrl: '%app.releng.releases%'

    App\Service\NewsItemFetcher:
        $newsFeedUrl: '%app.news.feed%'

    App\Service\PackagePopularityFetcher:
        $packageStatisticsApiUrl: '%app.packages.packageStatisticsApiUrl%'

    App\Serializer\PackageNormalizer:
        $cgitUrl: '%app.packages.cgit%'

    App\Controller\MirrorController:
        $mirrorCountry: '%app.mirrors.country%'

    App\Controller\PackagesController:
        $defaultArchitecture: '%app.packages.default_architecture%'

    App\Controller\SitemapController:
        bind:
            $defaultArchitecture: '%app.packages.default_architecture%'

    App\SearchRepository\MirrorSearchRepository:
        $mirrorCountry: '%app.mirrors.country%'

    App\EventListener\IndexUpdateEventListener:
        arguments:
            $environment: '%kernel.environment%'
        tags:
            - { name: 'doctrine.event_listener', event: 'postPersist', lazy: true }
            - { name: 'doctrine.event_listener', event: 'postUpdate', lazy: true }
            - { name: 'doctrine.event_listener', event: 'preRemove', lazy: true }
            - { name: 'doctrine.event_listener', event: 'postFlush', lazy: true }

    App\SearchIndex\SearchIndexer:
        arguments:
            -
                - '@App\SearchIndex\MirrorSearchIndexer'
                - '@App\SearchIndex\NewsSearchIndexer'
                - '@App\SearchIndex\PackageSearchIndexer'
                - '@App\SearchIndex\ReleaseSearchIndexer'

    App\SearchIndex\MirrorSearchIndexer:
        $environment: '%kernel.environment%'

    App\SearchIndex\NewsSearchIndexer:
        $environment: '%kernel.environment%'

    App\SearchIndex\PackageSearchIndexer:
        $environment: '%kernel.environment%'

    App\SearchIndex\ReleaseSearchIndexer:
        $environment: '%kernel.environment%'
